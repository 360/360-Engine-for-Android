<?xml version="1.0" encoding="UTF-8"?>
<!-- CDDL HEADER START
	The contents of this file are subject to the terms of the Common Development
	and Distribution License (the "License").
	You may not use this file except in compliance with the License.

	You can obtain a copy of the license at
	src/com/vodafone360/people/VODAFONE.LICENSE.txt or
	http://github.com/360/360-Engine-for-Android
	See the License for the specific language governing permissions and
	limitations under the License.

	When distributing Covered Code, include this CDDL HEADER in each file and
	include the License file at src/com/vodafone360/people/VODAFONE.LICENSE.txt.
	If applicable, add the following below this CDDL HEADER, with the fields
	enclosed by brackets "[]" replaced with your own identifying information:
	Portions Copyright [yyyy] [name of copyright owner]

	CDDL HEADER END

	Copyright 2010 Vodafone Sales & Services Ltd.  All rights reserved.
	Use is subject to license terms.
-->

<project name="VodafonePeople" default="all">
	<property environment="env"/> 
	
	<!-- The local.properties file is created and updated by the 'android' tool.
		 It contain the path to the SDK. It should *NOT* be checked in in Version
		 Control Systems. -->
	<property file="local.properties"/>
	
	<!-- The build.properties file can be created by you and is never touched
		 by the 'android' tool. This is the place to change some of the default property values
		 used by the Ant rules.
		 Here are some properties you may want to change/update:

		 application-package
			 the name of your application package as defined in the manifest. Used by the
			 'uninstall' rule.
		 source-folder
			 the name of the source folder. Default is 'src'.
		 out-folder
			 the name of the output folder. Default is 'bin'.

		 Properties related to the SDK location or the project target should be updated
		  using the 'android' tool with the 'update' action.

		 This file is an integral part of the build system for your application and
		 should be checked in in Version Control Systems.
		 -->
	<property file="build.properties"/>

	<!-- The default.properties file is created and updated by the 'android' tool, as well
		 as ADT. 
		 This file is an integral part of the build system for your application and
		 should be checked in in Version Control Systems. -->
	<property file="default.properties"/>
	
	<!-- Load the properties file based on the environment variable USERNAME_360. If you did not set it
	already on your system, please do so. After setting it, create a new properties file in
	build_properties_file with the name USERNAME_360.properties and add the sdk.dir and xml.task.dir properties
	to it. -->
	<property file="build_property_files/${env.USERNAME_360}.properties" />
	
	<echo>Building for username ${env.USERNAME_360}. SDK-Directory is ${sdk.dir} and the
		XMLTask is found in ${xml.task.dir}...</echo>
	
	<!-- Custom Android task to deal with the project target, and import the proper rules.
		 This requires ant 1.6.0 or above. -->
	<path id="android.antlibs">
		<pathelement path="${sdk.dir}/tools/lib/anttasks.jar" />
		<pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />
		<pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />
		<pathelement path="${sdk.dir}/tools/lib/apkbuilder.jar" />
		<pathelement path="${sdk.dir}/tools/lib/jarutils.jar" />
	</path>

	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" 
		classpath="${xml.task.dir}"/>
	
	<taskdef name="setup"
		classname="com.android.ant.SetupTask"
		classpathref="android.antlibs"/>

	<!-- Execute the Android Setup task that will setup some properties specific to the target,
		 and import the rules files.
		 To customize the rules, copy/paste them below the task, and disable import by setting
		 the import attribute to false:
			<setup import="false" />
		 
		 This will ensure that the properties are setup correctly but that your customized
		 targets are used.
	-->
	<setup import="false" />

	<!-- Custom tasks -->
	<taskdef name="aaptexec"
		classname="com.android.ant.AaptExecLoopTask"
		classpathref="android.antlibs"/>

	<taskdef name="apkbuilder"
		classname="com.android.ant.ApkBuilderTask"
		classpathref="android.antlibs"/>

	<!-- Properties -->
	<property environment="os"/> 
	<property name="android-tools" value="${sdk.dir}/tools" />
	
	<!-- Set Version code -->
	<xmltask source="AndroidManifest.xml">
		<copy path="/manifest/@android:versionCode" property="versionCode"/>
	</xmltask>
	
	<!-- Input directories -->
	<property name="source-folder" value="src" />
	<property name="gen-folder" value="gen" />
	<property name="resource-folder" value="res" />
	<property name="resource-config-folder" value="${resource-folder}/raw" />
	<property name="asset-folder" value="assets" />
	<property name="source-location" value="${basedir}/${source-folder}" />
	
	<property name="avd-name" value="testavd" />
	<property name="avd-port" value="5554" />
	
    <!-- folder for the 3rd party java libraries -->
    <property name="external-libs-folder" value="extlibs" />

	<!-- folder for the native libraries -->
	<property name="native-libs-folder" value="libs" />

	<!-- Output directories -->
	<property name="gen-folder" value="gen" />
	<property name="out-folder" value="output" />
	<property name="out-classes" value="${out-folder}/classes" />
	<property name="out-classes-location" value="${basedir}/${out-classes}"/>

	<property name="apk-dev-file-name" value="360people_r${revision}" />
	<property name="apk-beta-file-name" value="360people_v${versionCode}" />
	<property name="apk-market-file-name" value="360people_v${versionCode}" />
	
	<property name="apk-folder" value="${out-folder}/apk" />
	<property name="apk-dev-folder" value="${apk-folder}/dev/r${revision}" />
	<property name="apk-beta-folder" value="${apk-folder}/beta/v${versionCode}" />
	<property name="apk-market-folder" value="${apk-folder}/market/v${versionCode}" />
	
	<!-- out folders for a parent project if this project is an instrumentation project -->
	<property name="main-out-folder" value="../${out-folder}" />
	<property name="main-out-classes" value="${main-out-folder}/classes"/>
	<property name="javadocs-folder" value="${out-folder}/javadocs" />

	<!-- Intermediate files -->
	<property name="dex-file" value="classes.dex" />
	<property name="intermediate-dex" value="${out-folder}/${dex-file}" />
	<!-- dx does not properly support incorrect / or \ based on the platform
		 and Ant cannot convert them because the parameter is not a valid path.
		 Because of this we have to compute different paths depending on the platform. -->
	<condition property="intermediate-dex-location"
			value="${basedir}\${intermediate-dex}"
			else="${basedir}/${intermediate-dex}" >
		<os family="windows"/>
	</condition>
	<property name="config.file" value="${resource-config-folder}/config.properties" />
	
	<!-- The final package file to generate -->
	<property name="application-package" value="com.vodafone360.people"/>
	
	<!-- Signing information -->
	<property name="sign-password" value="vodsigning64"/>
	
	<!-- Tools  -->
	<condition property="exe" value=".exe" else=""><os family="windows"/></condition>
	<property name="adb" value="${android-tools}/adb${exe}"/>

	<!-- cleanup before we start -->
	<target name="clean">
		<delete dir="output"/>
	</target>

	<!-- Create the output directories if they don't exist yet. -->
	<target name="dirs">
		<echo>Creating output directories if needed...</echo>
		<mkdir dir="${resource-folder}" />
		<mkdir dir="${resource-config-folder}" />
		<mkdir dir="${external-libs-folder}" />
		<mkdir dir="${gen-folder}" />
		<mkdir dir="${out-folder}" />
		<mkdir dir="${out-classes}" />
		<mkdir dir="${javadocs-folder}" />
		<mkdir dir="${apk-folder}"/>
		<mkdir dir="${apk-dev-folder}"/>
	</target>

	<!-- Generate the R.java file for this project's resources. -->
	<target name="resource-src" depends="dirs">
		<echo>Generating R.java / Manifest.java from the resources...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-m" />
			<arg value="-J" />
			<arg path="${gen-folder}" />
			<arg value="-M" />
			<arg path="AndroidManifest.xml" />
			<arg value="-S" />
			<arg path="${resource-folder}" />
			<arg value="-I" />
			<arg path="${android.jar}" />
		</exec>
	</target>

	<!-- Generate java classes from .aidl files. -->
	<target name="aidl" depends="dirs">
		<echo>Compiling aidl files into Java classes...</echo>
		<apply executable="${aidl}" failonerror="true">
			<arg value="-p${android-aidl}" />
			<arg value="-I${source-folder}" />
			<arg value="-o${gen-folder}" />
			<fileset dir="${source-folder}">
				<include name="**/*.aidl"/>
			</fileset>
		</apply>
	</target>

	<!-- Compile this project's .java files into .class files. -->
	<target name="compile" depends="resource-src, aidl">
		<javac encoding="utf8" target="1.5" debug="$(debug-build)" extdirs=""
				destdir="${out-classes}"
				bootclasspathref="android.target.classpath">
			<src path="${source-folder}" />
			<src path="../${ui.project.name}/${source-folder}" />
			<src path="${gen-folder}" />
			<classpath>
				<pathelement path="${main-out-classes}"/>
			</classpath>
		 </javac>
	</target>

	<!-- Convert this project's .class files into .dex files. -->
	<target name="dex" depends="compile">
		<echo>Converting compiled files and external libraries into ${out-folder}/${dex-file}...</echo>
		<apply executable="${dx}" failonerror="true" parallel="true">
			<arg value="--dex" />
			<arg value="--no-locals" />
			<arg value="--output=${intermediate-dex-location}" />
			<arg path="${out-classes-location}" />
			<!-- <fileset dir="${external-libs-folder}" includes="FlurryAgent.jar"/> -->
			<fileset dir="${external-libs-folder}"/>
		</apply>
	</target>

	<!-- Put the project's resources into the output package file
		 This actually can create multiple resource package in case
		 Some custom apk with specific configuration have been
		 declared in default.properties.
		 -->
	<target name="package-resources">
		<echo>Packaging resources</echo>
		<aaptexec executable="${aapt}"
				command="package"
				manifest="AndroidManifest.xml"
				resources="${resource-folder}"
				assets="${asset-folder}"
				androidjar="${android.jar}"
				outfolder="${resources.output.folder}"
				basename="${fileName}_${environment}" />
	</target>

	<!-- Package the application and sign it with a debug key.
		 This is the default target when building. It is used for debug. -->
	<target name="debug">
		<apkbuilder
				outfolder="${release.output.folder}"	
				basename="${fileName}_${environment}"
				signed="true"
				verbose="false">
			<file path="${intermediate-dex}" />
			<sourcefolder path="${source-folder}" />
			<nativefolder path="${native-libs-folder}" />
		</apkbuilder>
	</target>

	<!-- Package the application without signing it.
		 This allows for the application to be signed later with an official publishing key. -->
	<target name="release">
		<echo> source-folder ${source-folder}</echo>
		
		<apkbuilder
						outfolder="${release.output.folder}"	
						basename="${fileName}_${environment}"
						signed="false"
						verbose="false">
					<file path="${intermediate-dex}" />
					<sourcefolder path="src" />
					<nativefolder path="${native-libs-folder}" /> 
				</apkbuilder>
			
			
		<!-- <apkbuilder
				outfolder="${release.output.folder}"	
				basename="${fileName}_${environment}"
				signed="false"
				verbose="false">
			<file path="${intermediate-dex}" />
			<sourcefolder path="${source-folder}" />
			<nativefolder path="${native-libs-folder}" /> 
		</apkbuilder> -->
	</target>
	
	<target name="sign-release-apk">
	<!-- jarsigner -keystore NPKEYSTORE -storepass vodsigning64 -keypass vodsigning64 bin\.NowPlus-unsigned.apk mykey -->
		<echo>Signing release apk with our (temp) key. </echo>
		<signjar jar="${out-unsigned-package}"
					keystore="NPKEYSTORE" 
					alias="NPKEYALIAS" 
					storepass="vodsigning64"  
					signedjar="${out-package}"
					/>
	</target>

	<!-- Install the package on the default emulator -->
	<target name="install-debug">
		<echo>Installing ${out-debug-package} onto default emulator...</echo>
		<exec executable="${adb}" failonerror="true">
			<arg value="install" />
			<arg path="${out-debug-package}" />
		</exec>
	</target>
	
	<!-- Install the package on the default emulator -->
	<target name="install">
	<!--target name="install" depends="release,doc,sign-release-apk,uninstall"-->
		<echo>Installing ${out-package} onto default emulator...</echo>
		<exec executable="${adb}" failonerror="true">
			<arg value="install" />
			<arg path="${out-package}" />
		</exec>
	</target>

	<!-- Reinstall the package on the default emulator -->
	<target name="reinstall-debug">
	<!--target name="reinstall-debug" depends="debug,doc"-->
 		<echo>Installing ${out-debug-package} onto default emulator...</echo>
		<exec executable="${adb}" failonerror="true">
			<arg value="install" />
			<arg value="-r" />
			<arg path="${out-debug-package}" />
		</exec>
	</target>
	
	<!-- Reinstall the package on the default emulator -->
	<!--target name="reinstall" depends="release,doc,sign-release-apk"-->
	<target name="reinstall">
 		<echo>Installing ${out-package} onto default emulator...</echo>
		<exec executable="${adb}" failonerror="true">
			<arg value="install" />
			<arg value="-r" />
			<arg path="${out-package}" />
		</exec>
	</target>

	<!-- Uninstall the package from the default emulator -->
	<target name="uninstall">
		<echo>Uninstalling ${application-package} from the default emulator...</echo>
		<exec executable="${adb}" failonerror="true">
			<arg value="uninstall" />
			<arg value="com.vodafone360.people" />
		</exec>
	</target>
	
	<!-- Build debug test package -->
	<target name="test-debug">
		<echo>Build test debug...</echo>
		<ant target="debug" dir="tests"/>
	</target>
	
	<!-- Build release test package -->
	<target name="test-release">
		<echo>Build test release...</echo>
		<ant target="release" dir="tests"/>
	</target>

	<!-- Pull code from Subversion. -->
	<target name="checkout-build" description="Pulls code from Subversion into the build directory">
		<exec executable="svn">
		<arg line="co --force ${svn.projecturl} -r ${svn.revision} ."/>
		</exec>
	</target>
		
	<!--
	Before running the tests, please setup the following test emulators. 
	
	[Required]
	android create avd -n TEST_AVD_2.1 -t android-7 -c 256M

	[Optional]
	android create avd -n TEST_AVD_1.5 -t android-3 -c 256M
	android create avd -n TEST_AVD_1.6 -t android-4 -c 256M
	android create avd -n TEST_AVD_2.0 -t android-5 -c 256M
	android create avd -n TEST_AVD_2.0.1 -t android-6 -c 256M

	[Run the emulator before starting the tests]	
	emulator -avd TEST_AVD_2.1 -wipe-data
	-->
	
	<target name="start.emulator">
		<echo>Start ${test-avd} emulator</echo>
		<parallel>
			<daemons>
				<exec executable="${emulator}">
					<arg value="-avd"/>
					<arg value="${test-avd}"/>
					<arg value="-wipe-data"/>
					<!-- TODO Parms:
					<arg value="-no-window"/>
					 -->
				</exec>
			</daemons>
		</parallel>
		<exec executable="adb wait-for-device"/>
    </target>

	<target name="test_emma">
		<!-- Choose emulator (EMMA requires 2.x or higher) -->
		<property name="test-avd" value="TEST_AVD_2.1" />
		
		<!-- <antcall target="start.emulator"/> -->

		<echo>Run all tests on the ${test-avd} emulator</echo>
		<ant antfile="tests/build.xml"
			target="emma-coverage-interface"
			inheritAll="false"/>

		<echo>Copy coverage results to output folder.</echo>
		<mkdir dir="output\apk\dev\r${revision}\coverage"/>
		<copy todir="output\apk\dev\r${revision}\coverage">
			<fileset dir="coverage\"/>
		</copy>
		
		<!-- TODO Kill Emulator -->
	</target>

	<target name="test_junit">
		<!-- Choose emulator (EMMA requires 2.x or higher) -->
		<property name="test-avd" value="TEST_AVD_2.1" />

		<echo>Run all Junit tests on the ${test-avd} emulator</echo>
		<ant antfile="tests/build.xml"
			target="run-tests-interface"
			inheritAll="false"/>
	</target>

	
	<!-- Run all the tests, logging the output. -->
	<target name="run-tests" description="Run tests">
		
		<echo>Clear the log - ADB path info: ${adb}</echo>
		
		<!-- Clear the log. -->
		<exec executable="${adb}" failonerror="true">
			<arg line="logcat -c"/>
		</exec>
		
		<echo>Run the tests, logging output to file</echo>
		<!-- Run the tests, logging output to file. -->
		<exec executable="cmd" failonerror="true">
			<arg value="/C"/>
			<arg value="adb shell am instrument -w com.vodafone360.people.tests/android.test.InstrumentationTestRunner &gt; output/results.txt"/>
		</exec>
		
		<echo>Save TestRunner output to file</echo>
		<!-- Save TestRunner output to file. -->
		<exec executable="cmd" spawn="true">
			<arg value="/C"/>
			<arg value="adb logcat TestRunner:I *:S &gt; tests/output/test_runner_output.txt"/>
		</exec>
		
		<echo>Save all output to file</echo>
		<!-- Save all output to file. -->
		<exec executable="cmd" spawn="true">
			<arg value="/C"/>
			<arg value="adb logcat &gt; tests/output/logcat_output.txt"/>
		</exec>
		<echo>Tests have run, see log files for results......</echo>
	</target>
	
	<!-- Pause to make sure that the emulator has really started. -->
	<target name="pause">
		<sleep seconds="30"/>
	</target>
	
	<!-- Start the emulator using ANT, as part of a workaround to Hudson defect 3105. -->
	<target name="startEmu">
		<exec executable="emulator" spawn="true" dir=".">
			<arg value="/c"/>
			<arg value="-avd testavd"/>
		</exec>
	<sleep seconds="3"/>
	</target>
	
	<target name="init_app">
		<property name="environment.file.name" value="build/environment.${environment}.properties"/>
		<property name="lifecycle.file.name" value="build/lifecycle.${lifecycle}.properties"/>
		<property name="resources.output.folder" value="${outputFolder}"/>
		<property name="release.output.folder" value="${outputFolder}"/>
		<property name="out-unsigned-package" value="${outputFolder}/${fileName}_${environment}-unsigned.apk"/>
		<property name="out-package" value="${outputFolder}/${fileName}_${environment}.apk"/>
		<property name="out-debug-package" value="${outputFolder}/${fileName}_${environment}-debug.apk"/>
		
		<!-- Make and label build folder -->
		<mkdir dir="${outputFolder}"/>
		<copy file="build/index_${lifecycle}.html" tofile="${outputFolder}/index.html">
			<filterchain>
		    	<replacetokens>
		        	<token key="BUILD_NAME" value="${fileName}"/>
					<token key="DEV_BUILD"  value="${fileName}_dev.apk"/>
					<token key="QA_BUILD"   value="${fileName}_qat.apk"/>
		    		<token key="ELLER_BUILD"   value="${fileName}_eller.apk"/>
					<token key="PRE_BUILD"  value="${fileName}_preprod.apk"/>
					<token key="PRO_BUILD"  value="${fileName}_prod.apk"/>
				</replacetokens>
			</filterchain>
		</copy>
		<copy file="release_notes.txt" tofile="${outputFolder}/release_notes.txt"/>
	</target>

	<target name="make_config_file" >
		<echo file="${config.file}" append="false">#configuration properties: environment${line.separator}</echo>
		<!-- update properties with Environment Mapping-->
		<concat destfile="${config.file}" append="true">	
			<fileset file="${environment.file.name}"/>
		</concat>
		<echo file="${config.file}" append="true">${line.separator}${line.separator}#configuration properties: lifecycle${line.separator}</echo>
		<!-- update properties with Lifecycle Mapping-->
		<concat destfile="${config.file}" append="true">	
			<fileset file="${lifecycle.file.name}"/>
		</concat>		
	</target>	
	
	<!-- cleanup before we start -->
	<target name="cleanConfigFolder">
		<delete file="${config.file}"/>
	</target>
	
	<target name="manifest-release">
		<echo>Set AndroidManifest.xml to Release mode</echo>
		<delete file="AndroidManifest.xml"/>
		<copy file="AndroidManifest-edit.xml" tofile="AndroidManifest.xml"/>
		<replaceregexp match="android:debuggable=&quot;true&quot;" replace="android:debuggable=&quot;false&quot;" flags="g" byline="true">
		    <fileset file="AndroidManifest.xml"/>
		</replaceregexp>
		<replaceregexp match="%%%%%%%%[^%]*%%%%%%%%" replace="REMOVED" flags="g" byline="false">
		    <fileset file="AndroidManifest.xml"/>
		</replaceregexp>
	</target>
		
	<target name="manifest-logcat">
		<echo>Set AndroidManifest.xml to LogCat mode</echo>
		<delete file="AndroidManifest.xml"/>
		<copy file="AndroidManifest-edit.xml" tofile="AndroidManifest.xml"/>
	</target>
	
	<target name="-dex-filter">
		<echo>Remove unused classes from production build</echo>
		<delete dir="${out-classes}\com\vodafone\people\ui\debug"/>
	</target>
			
	<target name="allProcessStart" depends="clean,dirs,resource-src,aidl,compile" />
	<target name="allProcess" depends="init_app,make_config_file,package-resources,debug,release,sign-release-apk" />
	<target name="testOnDevice" depends="allProcess,uninstall,install-debug,test-debug,run-tests" />

	<!-- <target name="allProcessFinalDebug" depends="init_app,uninstall,install-debug,test-debug" /> -->
	<!-- <target name="allProcessFinalRelease" depends="init_app,uninstall,install,test-release,run-tests" /> -->

	<target name="all" depends="test_junit,all-dev-lifecycle,publish" />
	
	<target name="all-nightly" depends="all-dev-lifecycle,checkstyle,test_emma,publish" />
	<target name="all-dev-lifecycle" depends="allProcessStart,dex,DevPro,DevPre,DevQAT,DevEller,DevDev" />
	
	<!-- START Dev Lifecycle  -->
	<target name="DevPro">
		<echo>DEV Lifecycle + Pro Environment</echo>
		<antcall target="allProcess">
			<param name="outputFolder" value="${apk-dev-folder}"/>
			<param name="fileName" value="${apk-dev-file-name}"/>
			<param name="environment" value="prod"/>
			<param name="lifecycle" value="dev"/>
		</antcall>
	</target>
	<target name="DevPre">
		<echo>Dev Lifecycle + Pre Environment</echo>
		<antcall target="allProcess">
			<param name="outputFolder" value="${apk-dev-folder}"/>
			<param name="fileName" value="${apk-dev-file-name}"/>
			<param name="environment" value="preprod"/>
			<param name="lifecycle" value="dev"/>
		</antcall>
	</target>
	<target name="DevQAT">
		<echo>Dev Lifecycle + QAT Environment</echo>
		<antcall target="allProcess">
			<param name="outputFolder" value="${apk-dev-folder}"/>
			<param name="fileName" value="${apk-dev-file-name}"/>
			<param name="environment" value="qat"/>
			<param name="lifecycle" value="dev"/>
		</antcall>
	</target>
	<target name="DevEller">
		<echo>Dev Lifecycle + Eller Environment</echo>
		<antcall target="allProcess">
			<param name="outputFolder" value="${apk-dev-folder}"/>
			<param name="fileName" value="${apk-dev-file-name}"/>
			<param name="environment" value="eller"/>
			<param name="lifecycle" value="dev"/>
		</antcall>
	</target>
	<target name="DevDev">
		<echo>Dev Lifecycle + Dev Environment</echo>
		<antcall target="allProcess">
			<param name="outputFolder" value="${apk-dev-folder}"/>
			<param name="fileName" value="${apk-dev-file-name}"/>
			<param name="environment" value="dev"/>
			<param name="lifecycle" value="dev"/>
		</antcall>	
	</target>
	<!-- END Dev Lifecycle  -->
	
	<!-- Check style  -->
	<import file="build_checkstyle.xml" />
	<target name="checkstyle">
		<echo>Checkstyle</echo>
		<antcall target="allChecks">
			<param name="checkstyle_dir" value="${apk-dev-folder}/checkstyle"/>
		</antcall>
	</target>

	<target name="publish">
		<copy file="build/redirect.html" tofile="output\apk\dev\redirect.html">
			<filterchain>
		    	<replacetokens>
		        	<token key="PATH" value="r${revision}/index.html"/>
				</replacetokens>
			</filterchain>
		</copy>
		
		<echo>FTP into sftp.zyb.com with user[${ftpuser}] pass[${ftppassword}].</echo>
		<scp sftp="true" trust="true" 
			todir="${ftpuser}:${ftppassword}@sftp.zyb.com:/nowplus/android/download/people_client/dev/">
		 <fileset dir="output\apk\dev\"/>
		</scp>
	</target>
</project>